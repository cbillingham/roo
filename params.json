{
  "name": "Roo",
  "tagline": "Senior compiler project for CMSI 488",
  "body": "![Logo](https://github.com/cbillingham/roo/blob/master/images/roo.jpg?raw=true)\r\n\r\nA simple, curly-brace language that compiles to Javascript. Roo combines the scripting benefits of a dynamically typed language with a readable syntax that is inspired by Java and Swift. While the basic syntax of Roo is inspired by Java and Swift, Roo adds modern functionailty, such as list comprehensions, default parameters, and much more, to the programmers toolbelt.\r\n\r\n## Compile\r\n```\r\nkanga helloWorld.roo\r\n```\r\n\r\n## Hello World\r\n```\r\n# helloWorld.roo\r\n\r\nprint(\"Hello, World!\")\r\n```\r\n\r\n## Example Program\r\n```\r\n# gcd.roo\r\n\r\nfun gcd(a, b) {\r\n  if b is 0 {\r\n    return a\r\n  } else { \r\n    return gcd(b, a%b)\r\n  }\r\n}\r\n\r\nprint( gcd(9,3) )      # prints 3\r\n```\r\n\r\n## Syntax\r\nCheck out a railroad diagram of our grammar here: [Roo Railroad Diagram](http://htmlpreview.github.io/?https://raw.githubusercontent.com/cbillingham/roo/master/images/RailroadDiagram.xhtml)\r\n### MicroSyntax\r\n```\r\nendofline ::= newline | $\r\nnewline   ::= [\\s* (\\r*\\n)+]\r\nletter    ::= [\\p{L}]\r\ndigit     ::= [\\p{Nd}]\r\nkeyword   ::= 'global'|'if'|'else'|'for'|'while'|'break'|'continue'|'loop'|'true'\r\n            | 'false'|'to'|'by'|'is'|'isnt'|'in'|'and'|'or'|'insist'|'return'|'null'\r\n            | 'class'|'new'\r\nid        ::= letter(letter|digit|_)*\r\nintlit    ::= digit+\r\nfloatlit  ::= digit* '.' digit+\r\nassignop  ::= '='|'+='|'-='|'*='|'/='|'%='\r\nrelop     ::= '<'|'<='|'=='|'is'|'!='|'isnt'|'>='|'>'\r\naddop     ::= '+'|'-'\r\nmulop     ::= '*'|'/'|'%'|'//'\r\nexpop     ::= '**'\r\nprefixop  ::= '!'|'-'\r\npostfixop ::= '++'|'--'\r\nboollit   ::= 'true'|'false'\r\nchar      ::= [^\\p{Cc}'\"\\\\] | [\\\\] [rnst'\"\\\\]\r\nstringlit ::= ('\"' char* '\"') | (\"'\" char* \"'\")\r\nnulllit   ::= 'null'\r\nskip      ::= [\\x09-\\x0d \\u2028\\u2029\\p{Zs}] | comment\r\ncomment   ::= '#' [^\\n]* newline\r\n            | '/#' .* '#/'\r\n```\r\n### MacroSyntax\r\n```\r\nProgram       ::= Block\r\nBlock         ::= (Stmt? endofline)*\r\nStmt          ::= WhileLoop | IfStmt | Loop | ForLoop | Dec | Exp\r\n                | ReturnStmt | BreakStmt | ContinueStmt\r\n\r\nDec           ::= AssignStmt | FunDec | ObjectDec\r\nAssignStmt    ::= 'global'? Var assignop Exp | Increment\r\nIncrement     ::= Var postfixop\r\nFunDec        ::= 'fun' id Params Body\r\nParams        ::= '(' (Param (',' Param)*)? ')'\r\nParam         ::= id '=' Exp | id\r\nObjectDec     ::= 'class' id Body\r\n\r\nLoop          ::= 'loop' Body\r\nWhileLoop     ::= 'while' Exp Body\r\nForLoop       ::= 'for' Exp Body\r\nIfStmt        ::= 'if' Exp Body (ElseIfStmt)* ElseSmt?\r\nElseIfStmt    ::= 'else if' Exp Body\r\nElseStmt      ::= 'else' Body\r\nBreakStmt     ::= 'break'\r\nContinueStmt  ::= 'continue'\r\nReturnStmt    ::= 'return' Exp\r\n\r\nBody          ::= '{' Block? '}'\r\nExp           ::= Exp1 (( 'or' | '||' ) Exp1)*\r\nExp1          ::= Exp2 (( 'and' | '&&' ) Exp2)*\r\nExp2          ::= Exp3 (relop Exp3)?\r\nExp3          ::= Range | Exp4\r\nRange         ::= Exp4 'to' Exp4 step?\r\n                | Exp4 '..' step?\r\n                | '..' Exp4 step?\r\nStep          ::= 'by' Exp4\r\nExp4          ::= Exp5 (addop Exp5)*\r\nExp5          ::= Exp6 (mulop Exp6)*\r\nExp6          ::= PrefixOp? Exp7\r\nExp7          ::= Exp8 (expop Exp8)?\r\nExp8          ::= ObjectCreation | Var | Exp9\r\nExp9          ::= Literal | '(' Exp ')' | Lambda | Comprehension\r\n\r\nLiteral       ::= nulllit | boollit | intlit | floatlit | stringlit\r\n                | TupleLit | ListLit | SetLit | MapLit\r\nVar           ::= id ( '[' Exp ']' | '.' id | '(' ExpList ')' )*\r\nExpList       ::= Exp (',' Exp)*\r\nLambda        ::= Params '->' Body\r\nComprehension ::= '[' Exp 'for' id 'in' Exp ']'\r\nObjCreation   ::= 'new' Var '(' ExpList ')'\r\nTupleLit      ::= '(' TupleList? ')'\r\nTupleList     ::= Exp ',' (Exp (',' Exp)* ','?)?\r\nListLit       ::= '[' ExpList? ']'\r\nSetLit        ::= '<' ExpList? '>'\r\nMapLit        ::= '{' BindingList? '}'\r\nBindingList   ::= Binding (',' Binding)*\r\nBinding       ::= endofline? id ':' Exp endofline?\r\n```\r\n\r\n## Features\r\n### Comments\r\nSingle line comments are created with #\r\n\r\n```\r\n# this is a comment\r\n```\r\nMulti-line comments are created with a /# ... #/\r\n\r\n```\r\n/#\r\nthis is a mult-line comment\r\nstill a comment?\r\nyep, still a comment\r\n#/\r\n```\r\n### Assignments\r\nVariable assignments are simple. No keyword or special symbol necessary.\r\n\r\n```\r\nx\r\ny = 3\r\nz = \"hello\"\r\n```\r\n### Types\r\nRoo has the following built-in primitive types:\r\n\r\n```\r\nx = 3                      # int\r\n\r\ny = 3.0                    # double\r\ny = 3.4\r\ny = 0.4\r\ny = .3\r\ny = 3.                     # syntax error\r\n\r\nw = true                   # bool\r\nw = false\r\n\r\nz = null                   # roo has a null type, which can be assigned to variables\r\n```\r\nRoo also has built in reference types including String, List, Set, Tuple, and Map.\r\n\r\n```\r\ns = \"a\"                    # Roo does not have characters, only strings\r\ns = \"hello\"                \r\ns = 'a'                    # Strings can use both single or double quotes\r\ns = 'hello'\r\n\r\na = [1,2,3]                # lists are ordered and mutable\r\n\r\nb = (1,2,3)                # tuples are ordered and immutable\r\n\r\nc = <1,2,3>                # sets are unordered and mutable\r\n\r\nd = [x:1, y:2, z:3]        # maps are a mutable collection of key-value pairs\r\n```\r\n#### List Ranges, Comprehensions, and Slices\r\nRoo adds modern list functionality to make your code more readable and easier to write.\r\n\r\n```\r\nx = [0 to 3]               # using list ranges is the same as saying [0,1,2,3]\r\n```\r\nUse a similar syntax for returning list slices\r\n\r\n```\r\nl = ['hi','bye',1,3]\r\ny = l[0 to 1]               # y = ['hi','bye']\r\ny = l[0 to 2 by 2]          # y = ['hi',1]\r\n```\r\n\r\nRoo also has list comprehensions.\r\n\r\n```\r\nl = [0,1,2,3]\r\ny = [x*2 for x in l]        # y = [0,2,4,6]\r\n```\r\n\r\n### Operators\r\nRoo adds some additional keywords as operators for readability. The following is a list of operators that Roo supports.\r\n\r\n```\r\nRoo                                     JavaScript\r\n--------                                --------------\r\n>                                       >\r\n>=                                      >=\r\n<                                       <\r\n<=                                      <=\r\nis,   ==                                ===\r\nisnt, !=                                !==\r\n!                                       !\r\nand,  &&                                &&\r\nor,   ||                                ||\r\ntrue                                    true\r\nfalse                                   false\r\n\r\na ** b\t                                Math.pow(a, b)\r\na // b\t                                Math.floor(a / b)\r\n\r\na * b                                   a * b\r\na / b                                   a / b\r\na % b                                   a % b\r\n\r\na++                                     a = a + 1\r\na--                                     a = a - 1\r\n```\r\n### If Statements\r\n```\r\nif x > 3 {\r\n  return \"x is greater than 3\"\r\n} else {\r\n  return \"x is less than or equal to 3\"\r\n}\r\n\r\n# is equivalent to\r\n\r\nif x > 3 {return \"x is greater than 3\"}\r\nelse {return \"x is less than or equal to 3\"}\r\n```\r\n### For Loops\r\nFor loops use list comprehensions which allow you to easily loop through objects or lists.\r\n\r\n```\r\npeople = [\"jack\", \"jill\"]\r\n\r\nfor person in people {\r\n  goUpTheHill(person)\r\n}\r\n```\r\nIf you need the index as well just use the built in enumerate function.\r\n\r\n```\r\nfor index, person in enumerate(people) {\r\n  setAge(person, 8+index)\r\n}\r\n```\r\nFor looping over a certain range of numbers use the 'to' keyword.\r\n\r\n```\r\nfor countdown in 10 to 1 {\r\n  print(countdown)\r\n}\r\n```\r\nWhen the above code is executed it returns:\r\n\r\n```\r\n10\r\n9\r\n8\r\n7\r\n6\r\n5\r\n4\r\n3\r\n2\r\n1\r\n```\r\nIf you don't need the values of your loop you can just run the following. Also use the 'by' keyword to change your iteration number.\r\n\r\n```\r\n                                     # Javascript equivalent\r\n\r\ncount = 8                            # var count = 8\r\n\r\nfor 1 to count by 2 {                # for (int i = 1; i <= count; i=i+2) {\r\n  x = x/y                            #    x = x/y\r\n}                                    # }\r\n```\r\nWhen the above code is executed it will divide x by y 4 times, looping through 1 to 8, increasing by 2 each time.\r\n\r\n### While Loops\r\nWhile loops are standard syntax.\r\n\r\n```\r\nwhile x < y {\r\n  print \"x<y is true\"\r\n}\r\n```\r\nYou can run a while true loop with the following:\r\n\r\n```\r\nloop {\r\n  if x < y {\r\n    break\r\n  }\r\n  print \"x<y is true\"\r\n  x--\r\n}\r\n```\r\n### Functions\r\n\r\nFunctions are declared with the keyword fun.\r\n\r\n```\r\nfun gcd(a, b) {\r\n  if b is 0 {\r\n    return a\r\n  } else { \r\n    return gcd(b, a%b)\r\n  }\r\n}\r\n```\r\nIn Roo functions are also objects, so they are first-class by default.\r\n\r\n```\r\nfun printResult(f, a) {\r\n  print( f(a) )\r\n}\r\n\r\nfun square(a) {\r\n  return a*a\r\n}\r\n\r\nfun double(a) {\r\n  return a*2\r\n}\r\n\r\nprintResult(square, 3)           # prints 9\r\nprintResult(double, 3)           # prints 6\r\n```\r\nRoo also allows anonymous functions by using the single arrow () ->\r\n\r\n```\r\nfun add(b) {\r\n  return (a) -> {return a+b} \r\n}\r\n  \r\nadd5 = add(5)\r\n```\r\n### Insist Statement\r\n\r\nTo easily check function arguments, you can use the insist keyword to remove the boilerplate of throwing exceptions for illegal arguments.\r\n\r\n```\r\nfun divide(x, y) {\r\n  insist y isnt 0\r\n  \r\n  return x / y\r\n}\r\n\r\ndivide(4,0)        # throws an illegal argument exception\r\n```\r\n\r\n## Scoping\r\n\r\nRoo uses lexical, function scoping. Variable declarations are bound to the local scope, unless the __**global**__ keyword is used.\r\nVariables declared in lower scopes shadow those in higher scopes with the same name.\r\n\r\n```\r\nx = 4                   #local\r\n```\r\n\r\n```\r\n() -> {\r\n  global x = 4         #global \r\n}\r\n```\r\n\r\n```\r\nx = 4 \r\n\r\nfun add1(y) {\r\n  return x + 1          # returns 5\r\n}\r\n```\r\n\r\n```\r\nx = 4 \r\n\r\nfun add1(y) {\r\n  x = 7\r\n  return x + 1          # returns 8\r\n}\r\n```\r\n\r\n```\r\nx = 4 \r\n\r\nfun printNum(z) {\r\n  global y = 47\r\n  print(z)                \r\n}\r\n\r\nprintNum(x)            #prints 4\r\nprintNum(y)            #prints 47\r\n```\r\n\r\n```\r\nx = 47\r\n\r\nfun printANumber() {\r\n   x = 4\r\n   fun doThePrinting() {\r\n      print(x)          \r\n   }\r\n   doThePrinting()\r\n}\r\n\r\nprintANumber()        #prints 4\r\n```",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}